esphome:
  name: analog_clock
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: "your_SSID"
  password: "your_PASSWORD"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Analog Clock Fallback Hotspot"
    password: "fallback_password"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "api_password"

ota:
  password: "ota_password"

time:
  - platform: sntp
    id: sntp_time

output:
  - platform: gpio
    pin: D1
    id: coil_pin_1
  - platform: gpio
    pin: D2
    id: coil_pin_2

globals:
  - id: clock_speed
    type: float
    restore_value: yes
    initial_value: '1.0'

web_server:
  port: 80
  include_internal: true

interval:
  - interval: 1s
    then:
      - lambda: |-
          int seconds = id(sntp_time).now().second;
          int minutes = id(sntp_time).now().minute;
          int hours = id(sntp_time).now().hour;
          int total_seconds = hours * 3600 + minutes * 60 + seconds;
          int adjusted_seconds = total_seconds * id(clock_speed);
          int coil_state = adjusted_seconds % 2;
          id(coil_pin_1).turn_on();
          id(coil_pin_2).turn_off();
          if (coil_state == 1) {
            id(coil_pin_1).turn_off();
            id(coil_pin_2).turn_on();

# Define endpoints to adjust clock speed
custom:
  - lambda: |-
      auto &server = id(web_server).get_server();
      server->on("/speed_up", HTTP_GET, [](AsyncWebServerRequest *request){
        id(clock_speed) += 0.1;
        request->send(200, "text/plain", "Speed increased");
      });
      server->on("/slow_down", HTTP_GET, [](AsyncWebServerRequest *request){
        id(clock_speed) -= 0.1;
        request->send(200, "text/plain", "Speed decreased");
      });
